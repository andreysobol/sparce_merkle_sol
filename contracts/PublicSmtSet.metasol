// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Smt{{subcontractname}}.sol";

contract PublicSmt{{subcontractname}} {
    using SMT{{subcontractname}} for SMT{{subcontractname}}.MerkleTree;
    SMT{{subcontractname}}.MerkleTree public tree;

    constructor(uint8 _maxDepth) {
        tree.initialize(_maxDepth);
    }

    function modifyElement(uint index, bytes calldata element) public {
        tree.modifyElement(index, element);
    }

    function addToNextEmpty(bytes memory data) public returns (uint256) {
        return tree.addToNextEmpty(data);
    }

    function removeAndRebase(uint index) public returns (bool) {
        return tree.removeAndRebase(index);
    }

    function getRoot() public view returns (bytes32) {
        return tree.getRoot();
    }

    function getDepth() public view returns (uint8) {
        return tree.depth;
    }

    function getFirstEmptySlot() public view returns (uint256) {
        return tree.firstEmptySlot;
    }
}

// vim: ft=solidity
