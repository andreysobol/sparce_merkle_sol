// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library SMT{{subcontractname}} {
    bytes32 constant internal EMPTY_SUBTREE = 0x00;

    struct MerkleTree {
        uint8 depth;
        uint8 maxDepth;
        {{ if SET }}
        uint256 public firstEmptySlot = 0;
        {{ else }}
        {{ endif }}
        mapping(uint256 => bytes32) emptySubtreeCache;
        // tree level => index inside level => element hash
        mapping(uint256 => mapping(uint256 => bytes32)) nodes;
        mapping(uint256 => bytes) elementData;
    }

    using SMT{{subcontractname}} for MerkleTree;

    function initialize(MerkleTree storage tree, uint8 _depth, uint8 _maxDepth) internal {
        require(tree.depth == 0, "Cannot initialize twice");
        require(_depth > 0, "Depth must be non-zero");
        require(_depth < 255, "Depth must be < 255");
        require(_maxDepth < 255, "Max depth must be < 255");

        tree.emptySubtreeCache[0] = {{hash}}("");
        // current depth == 0
        _calculateEmptySubtreeHash(tree, _depth);
        tree.depth = _depth;
        tree.maxDepth = _maxDepth;
    }

    function totalElements(MerkleTree storage tree) internal view returns (uint256) {
        // 1<<depth == 2**depth
        // max(totalElements) == 2**254
        return 1<<tree.depth;
    }

    function increaseDepth(MerkleTree storage tree, uint8 depthDifference) internal {
        require(tree.depth > 0, "Tree must be initialized");
        require(depthDifference > 0, "depthDifference must be non-zero");
        uint8 oldDepth = tree.depth;
        // overflow protection done by solidity 0.8
        uint8 newDepth = oldDepth + depthDifference;
        require(newDepth <= tree.maxDepth, "newDepth must be <= maxDepth");

        _calculateEmptySubtreeHash(tree, newDepth);

        for (uint8 level = oldDepth+1; level <= newDepth; level = inc(level)) {
            _updateNode(tree, level, 0);
        }

        tree.depth = newDepth;
    }

    function decreaseDepth(MerkleTree storage tree, uint8 depthDifference) internal {
        require(depthDifference > 0, "depthDifference must be non-zero");
        uint8 oldDepth = tree.depth;
        // underflow protection done by solidity 0.8
        uint8 newDepth = oldDepth - depthDifference;
        require(newDepth > 0, "Tree must have non-zero depth");

        for (uint8 level = newDepth; level < oldDepth; level = inc(level)) {
            require(tree.nodes[level][1] == EMPTY_SUBTREE, "Subtree must be empty");
            // If we will delete this:
            // delete nodes[level+1][0];
            // delete emptySubtreeCache[level+1];
            // refund will be smaller than gas spent :(
        }

        tree.depth = newDepth;
    }

    function getRoot(MerkleTree storage tree) internal view returns (bytes32) {
        if (tree.nodes[tree.depth][0] == EMPTY_SUBTREE) {
            return tree.emptySubtreeCache[tree.depth];
        }
        return tree.nodes[tree.depth][0];
    }

    function _calculateEmptySubtreeHash(MerkleTree storage tree, uint8 toLevel) private {
        uint8 currentDepth = tree.depth;
        bytes32 prev = tree.emptySubtreeCache[currentDepth];

        for (uint8 level = currentDepth+1; level <= toLevel; level = inc(level)) {
            // We write the hash to both memory and storage at the same time
            // in order to use it in the next iteration. It is cheaper to read
            // from memory instead of storage, so we save it here.
            tree.emptySubtreeCache[level] = prev = {{hash}}(abi.encodePacked(prev, prev));
        }
    }

    function _updateNode(MerkleTree storage tree, uint8 level, uint i) private {
        // conditions, enforced by other methods:
        // 1 <= level <= depth
        // 0 <= i     <  2**(depth-level)

        bytes32 v0;
        bytes32 v1;

        unchecked {
            uint i0 = 2*i;
            uint i1 = 2*i+1;

            v0 = tree.nodes[level-1][i0];
            v1 = tree.nodes[level-1][i1];
        }

        if ((v0 == EMPTY_SUBTREE) && (v1 == EMPTY_SUBTREE)) {
            delete tree.nodes[level][i];
            // If we will use:
            // nodes[level][i] = EMPTY_SUBTREE;
            // We will spend much more gas
            return;
        }

        if (v0 == EMPTY_SUBTREE) {
            unchecked { v0 = tree.emptySubtreeCache[level-1]; }
        }

        if (v1 == EMPTY_SUBTREE) {
            unchecked { v1 = tree.emptySubtreeCache[level-1]; }
        }

        tree.nodes[level][i] = {{hash}}(abi.encodePacked(v0, v1));
    }

    function _modifyTree(MerkleTree storage tree, uint index, bytes32 hashedElement) private {
        require(tree.depth > 0, "Tree must be initialized");
        require(index < totalElements(tree), "Index out of bounds");
        tree.nodes[0][index] = hashedElement;
        uint currentIndex = index;
        for (uint8 level = 1; level <= tree.depth; level = inc(level)) {
            // index >> 1 (level times) == index / 2**level
            currentIndex = currentIndex >> 1;
            _updateNode(tree, level, currentIndex);
        }
    }

    function _modifyElement(MerkleTree storage tree, uint index, bytes memory data) private {
        require(data.length > 0, "Element can't be empty");
        tree.elementData[index] = data;
        bytes32 hashedElement = {{hash}}(data);
        _modifyTree(tree, index, hashedElement);
    }

    function _addElement(MerkleTree storage tree, uint index, bytes memory data) private {
        require(tree.elementData[index].length == 0, "Element already exists");
        _modifyElement(tree, index, data);
    }

    function _removeElement(MerkleTree storage tree, uint index) private {
        require(tree.elementData[index].length != 0, "Can't remove empty element");
        delete tree.elementData[index];
        // If we will use:
        // elementData[index] = "";
        // We will spend much more gas
        _modifyTree(tree, index, EMPTY_SUBTREE);
    }

    // because solidity 0.8 ¯\_(ツ)_/¯
    function inc(uint8 x) pure private returns (uint8) {
        unchecked { return x + 1; }
    }

    {{ if SET }}

    {{ else }}
    function modifyElement(MerkleTree storage tree, uint index, bytes memory data) internal {
        _modifyElement(tree, index, data);
    }

    function addElement(MerkleTree storage tree, uint index, bytes memory data) internal {
        _addElement(tree, index, data);
    }

    function removeElement(MerkleTree storage tree, uint index) internal {
        _removeElement(tree, index);
    }
    {{ endif }}
}

// vim: ft=solidity
